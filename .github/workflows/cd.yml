name: CD - Deploy to Azure Container Instance
# Automated deployment to Azure Container Instance with individual secrets

on:
  workflow_run:
    workflows: ["CI - Build, Container Security & SARIF Upload"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: aiportfolioanalysis
  ACI_RESOURCE_GROUP: ${{ secrets.ACI_RESOURCE_GROUP }}
  ACI_NAME: ${{ secrets.ACI_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Get image tag
      id: image
      run: |
        # Use the same tagging format as CI: sha-{short-commit}
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "tag=sha-$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA" >> $GITHUB_OUTPUT

    - name: Get container FQDN for environment variables
      id: container_url
      run: |
        # Get the region from deployment location and generate FQDN
        REGION=$(echo "South Central US" | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
        CONTAINER_FQDN="${{ env.ACI_NAME }}.${REGION}.azurecontainer.io"
        echo "fqdn=$CONTAINER_FQDN" >> $GITHUB_OUTPUT
        echo "frontend_url=http://$CONTAINER_FQDN" >> $GITHUB_OUTPUT

    - name: Deploy to Azure Container Instance
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.ACI_RESOURCE_GROUP }}
        dns-name-label: ${{ env.ACI_NAME }}
        image: ${{ steps.image.outputs.image }}
        name: ${{ env.ACI_NAME }}
        location: 'South Central US'
        ports: '8080'
        cpu: 0.1
        memory: 0.2
        registry-login-server: ${{ env.REGISTRY }}
        registry-username: ${{ secrets.AZURE_CLIENT_ID }}
        registry-password: ${{ secrets.AZURE_CLIENT_SECRET }}
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Production
          ASPNETCORE_URLS=http://+:8080
          Authentication__Google__ClientId=${{ secrets.GOOGLE_CLIENTID }}
          Authentication__Google__ClientSecret=${{ secrets.GOOGLE_CLIENTSECRET }}
          Frontend__BaseUrl=${{ steps.container_url.outputs.frontend_url }}

    - name: Verify deployment
      run: |
        echo "Waiting for container to start..."
        sleep 30
        
        # Get the FQDN of the container instance with error handling
        FQDN=$(az container show \
          --resource-group ${{ env.ACI_RESOURCE_GROUP }} \
          --name ${{ env.ACI_NAME }} \
          --query ipAddress.fqdn \
          --output tsv 2>/dev/null || echo "")
        
        if [ -z "$FQDN" ]; then
          echo "❌ Failed to get container FQDN"
          exit 1
        fi
        
        echo "Container FQDN: $FQDN"
        
        # Health check with retry logic
        MAX_RETRIES=5
        RETRY_COUNT=0
        HTTP_STATUS="000"
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$HTTP_STATUS" != "200" ]; do
          echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://$FQDN || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Deployment successful - Application is responding"
            echo "🌐 Application URL: http://$FQDN"
            break
          else
            echo "⏳ HTTP Status: $HTTP_STATUS, retrying in 15 seconds..."
            sleep 15
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "❌ Deployment failed after $MAX_RETRIES attempts - Final HTTP Status: $HTTP_STATUS"
          exit 1
        fi

    - name: Create deployment summary
      run: |
        FQDN=$(az container show \
          --resource-group ${{ env.ACI_RESOURCE_GROUP }} \
          --name ${{ env.ACI_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ steps.image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY